import { Component, OnInit, viewChild, ElementRef, AfterViewChecked, signal, ViewChild, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Message {
  text: string;                                     //El texto del mensaje
  isBot: boolean;                                   //Es del bot o del usuario
  timestamp: Date;                                  //cuando se envia
  hasAction?: boolean;                              //tiene accion?
  actionType?: 'login' | 'register' | 'close_chat'; //Tipo de acci√≥n
  actionText?: string;                              //texto del btn
}

@Component({
  selector: 'app-chatbot',                  //para html de home
  standalone: true, 
  imports: [CommonModule, FormsModule],
  templateUrl: './chatbot.component.html',  //html del chatbot
  styleUrl: './chatbot.component.css'       //estilo del chatbot
})
export class ChatbotComponent implements OnInit, AfterViewChecked{
  @ViewChild('messagesContainer') messagesContainer!: ElementRef;
  
  // Evento para comunicar acciones al componente padre
  @Output() loginRequested = new EventEmitter<void>();
  @Output() registerRequested = new EventEmitter<void>();
  
  //Estados del chatbox
  isOpen = signal(false);           //Esta abierta la ventana del chatbot?
  isTyping = signal(false);         //Esta escribiendo el chatbot?
  messages = signal<Message[]>([]); //Lista de todos los mensajes

  currentMessage = '';              //Texto que escribe el usuario

  //Respuestas predefinidas
  private botResponses: { [key: string]: string[] } = {
    'saludo': [
      '¬°Hola! üëã Soy tu asistente de ElDato. ¬øEn qu√© puedo ayudarte hoy?',
      '¬°Bienvenido a ElDato! ¬øBuscas alg√∫n servicio en particular?'
    ],
    'servicios': [
      'En El Dato puedes encontrar diversos servicios como: jardiner√≠a, limpieza, clases particulares, reparaciones, y mucho m√°s. ¬øQu√© tipo de servicio necesitas?',
      'Ofrecemos una amplia gama de servicios locales. ¬øTe interesa algo espec√≠fico como reparaciones, limpieza o servicios profesionales?'
    ],
    'como_funciona': [
      'Es muy sencillo: 1) Busca el servicio que necesitas 2) Contacta al profesional 3) Coordina el trabajo. ¬°As√≠ de f√°cil!',
      'ElDato conecta a personas que necesitan servicios con profesionales locales. Solo tienes que buscar, contactar y coordinar.'
    ],
    'precios': [
      'Los precios var√≠an seg√∫n el servicio y el profesional. Cada uno establece sus tarifas. Puedes comparar diferentes opciones.',
      'No cobramos comisi√≥n. Los precios los establecen directamente los profesionales seg√∫n su experiencia y el tipo de servicio.'
    ],
    'registro': [
      'Para registrarte, haz clic en "Iniciar Sesi√≥n/Registro" en la parte superior. ¬°Es gratis y muy r√°pido!',
      'El registro es gratuito. Solo necesitas hacer clic en el bot√≥n de registro y completar tus datos b√°sicos.'
    ],
    'login': [
      'Para iniciar sesi√≥n, usa el bot√≥n "Iniciar Sesi√≥n/Registro" en la parte superior de la p√°gina.',
      'Si ya tienes cuenta, solo haz clic en "Iniciar Sesi√≥n/Registro" arriba para acceder.'
    ],
    'como_ingreso': [
      'Para ingresar, solo haz clic en el bot√≥n "Iniciar Sesi√≥n/Registro" en la parte superior derecha.',
      'Debes presionar "Iniciar Sesi√≥n/Registro" arriba. Si no tienes cuenta, ah√≠ mismo puedes registrarte.'
    ],
    'ingresar': [
      '¬øQuieres ingresar a tu cuenta o crear una nueva? Te ayudo a dirigirte al lugar correcto.',
      'Perfecto, te ayudo a ingresar. ¬øYa tienes cuenta o necesitas registrarte?'
    ],
    'crear_cuenta': [
      'Crear tu cuenta es s√∫per f√°cil y gratis. Te dirijo al formulario de registro.',
      '¬°Excelente decisi√≥n! El registro es gratuito y toma menos de 2 minutos.'
    ],
    'ubicacion': [
      'El Dato funciona en toda Chile. Conectamos personas con profesionales locales en su √°rea.',
      'Nos enfocamos en servicios locales. ¬øEn qu√© ciudad o zona est√°s buscando servicios?'
    ],
    'seguridad': [
      'Todos los profesionales pasan por un proceso de verificaci√≥n. Tambi√©n tenemos un sistema de calificaciones y comentarios.',
      'Tu seguridad es importante. Verificamos profesionales y tienes acceso a rese√±as de otros usuarios.'
    ],
    'default': [
      'Interesante pregunta. ¬øPodr√≠as ser m√°s espec√≠fico? Puedo ayudarte con informaci√≥n sobre servicios, registro, precios, etc.',
      'No estoy seguro de entender completamente. ¬øPodr√≠as reformular tu pregunta?',
      'Para brindarte la mejor ayuda, ¬øpodr√≠as darme m√°s detalles sobre lo que necesitas?'
    ]
  };

  //cuando se ejecuta
  ngOnInit():void{
    //Mensaje inicial del bot
    this.addBotMessage('¬°Hola! üëã Soy tu asistente virtual de ElDato. ¬øEn qu√© puedo ayudarte hoy?');
  }
  
  //hace scroll hacia abajo
  ngAfterViewChecked() {
    this.scrollToBottom();
  }

  toggleChat() {
    this.isOpen.update((value: any) => !value);
  }

  //si el mensaje esta vacio o el bot esta escribiendo, no hace nada
  sendMessage() {
    if (!this.currentMessage.trim() || this.isTyping()) return;

    // Agregar mensaje del usuario
    this.messages.update(messages => [...messages, {
      text: this.currentMessage,
      isBot: false,
      timestamp: new Date()
    }]);

    //guarda el mensaje en minusculas para analizarlo
    const userMessage = this.currentMessage.toLowerCase();
    this.currentMessage = '';

    // Simular que el bot est√° escribiendo
    this.isTyping.set(true);

    //simula que el bot piensa antes de responder
    setTimeout(() => {
      try {
        const response = this.generateBotResponse(userMessage);
        this.addBotMessage(response.text, response.hasAction, response.actionType, response.actionText);
      } catch (error) {
        console.error('Error generating response:', error);
        this.addBotMessage('Disculpa, hubo un error. ¬øPodr√≠as intentar de nuevo?');
      } finally {
        this.isTyping.set(false);
      }
    }, Math.random() * 1000 + 500); // Entre 0.5 y 1.5 segundos
  }

  private addBotMessage(text: string, hasAction: boolean = false, actionType?: 'login' | 'register' | 'close_chat', actionText?: string) {
    this.messages.update(messages => [...messages, {
      text,
      isBot: true,
      timestamp: new Date(),
      hasAction,
      actionType,
      actionText
    }]);
  }

  private generateBotResponse(userMessage: string): { text: string, hasAction?: boolean, actionType?: 'login' | 'register' | 'close_chat', actionText?: string } {
    // Detectar intenci√≥n del usuario - ORDEN IMPORTANTE: m√°s espec√≠fico primero
    let responseKey = 'default';
    let hasAction = false;
    let actionType: 'login' | 'register' | 'close_chat' | undefined;
    let actionText = '';

    if (this.containsWords(userMessage, ['hola', 'buenas', 'saludos', 'hey', 'buenos d√≠as', 'buenas tardes'])) {
      responseKey = 'saludo';
    } 
    // Primero: Preguntas espec√≠ficas sobre C√ìMO ingresar
    else if (this.containsWords(userMessage, ['como ingreso', 'c√≥mo ingreso', 'como entro', 'c√≥mo entro', 'como accedo', 'c√≥mo accedo']) ||
             (this.containsWords(userMessage, ['como', 'c√≥mo']) && this.containsWords(userMessage, ['ingresar', 'entrar', 'acceder']))) {
      responseKey = 'como_ingreso';
      hasAction = true;
      actionType = 'login';
      actionText = 'Ir a Iniciar Sesi√≥n/Registro';
    }
    // Segundo: Referencias espec√≠ficas a cuenta existente
    else if (this.containsWords(userMessage, ['iniciar sesi√≥n', 'iniciar sesion', 'login', 'mi cuenta', 'ingresar a mi cuenta', 'entrar a mi cuenta'])) {
      responseKey = 'login';
      hasAction = true;
      actionType = 'login';
      actionText = 'Iniciar Sesi√≥n';
    }
    // Tercero: Registro espec√≠fico
    else if (this.containsWords(userMessage, ['registro', 'registrar', 'registrarme', 'crear cuenta', 'nueva cuenta', 'sign up'])) {
      responseKey = 'crear_cuenta';
      hasAction = true;
      actionType = 'register';
      actionText = 'Ir a Registro';
    }
    // Cuarto: Ingresar gen√©rico (sin "c√≥mo")
    else if (this.containsWords(userMessage, ['ingresar', 'entrar', 'acceder', 'quiero entrar']) && 
             !this.containsWords(userMessage, ['como', 'c√≥mo'])) {
      responseKey = 'ingresar';
      hasAction = true;
      actionType = 'login';
      actionText = 'Ir a Iniciar Sesi√≥n/Registro';
    }
    else if (this.containsWords(userMessage, ['servicio', 'servicios', 'que hacen', 'qu√© hacen', 'que ofrecen'])) {
      responseKey = 'servicios';
    } 
    else if (this.containsWords(userMessage, ['como funciona', 'c√≥mo funciona', 'como usar', 'c√≥mo usar', 'como es', 'c√≥mo es'])) {
      responseKey = 'como_funciona';
    } 
    else if (this.containsWords(userMessage, ['precio', 'precios', 'cuesta', 'costo', 'tarifa', 'cu√°nto', 'cuanto'])) {
      responseKey = 'precios';
    } 
    else if (this.containsWords(userMessage, ['donde', 'd√≥nde', 'ubicaci√≥n', 'lugar', 'zona', 'ciudad'])) {
      responseKey = 'ubicacion';
    } 
    else if (this.containsWords(userMessage, ['seguro', 'seguridad', 'confianza', 'verificaci√≥n'])) {
      responseKey = 'seguridad';
    }
    else if (this.containsWords(userMessage, ['pago', 'pagar', 'dinero', 'plata', 'transferencia', 'efectivo'])) {
      responseKey = 'pago';
    }
    else if (this.containsWords(userMessage, ['garant√≠a', 'garantia', 'asegurado', 'respaldo'])) {
      responseKey = 'garantia';
    }

    // Seleccionar respuesta aleatoria
    const responses = this.botResponses[responseKey];
    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];

    return {
      text: selectedResponse,
      hasAction,
      actionType,
      actionText
    };
  }

  private containsWords(text: string, words: string[]): boolean {
    //retorna true si al menus una palabra cumple
    return words.some(word => text.includes(word));
  }

  // M√©todo para manejar las acciones de los botones
  onActionClick(actionType: 'login' | 'register' | 'close_chat') {
    switch(actionType) {
      case 'login':
        this.loginRequested.emit();
        this.addBotMessage('Te estoy redirigiendo al inicio de sesi√≥n. Si tienes problemas, ¬°no dudes en preguntarme!');
        break;
      case 'register':
        this.registerRequested.emit();
        this.addBotMessage('Te dirijo al formulario de registro. ¬°Bienvenido a la comunidad ElDato!');
        break;
      case 'close_chat':
        this.isOpen.set(false);
        break;
    }
  }

  formatTime(date: Date): string {
    return date.toLocaleTimeString('es-ES', {
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  private scrollToBottom(): void {
    try {
      if (this.messagesContainer) {
        this.messagesContainer.nativeElement.scrollTop = 
          this.messagesContainer.nativeElement.scrollHeight;
      }
    } catch(err) {}
  }
}